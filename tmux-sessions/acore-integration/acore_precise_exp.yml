# ~/.tmuxinator/acore_precise_exp.yml

name: acore_precise_exp
root: ~/

# Optional tmux socket
# socket_name: foo

# Note that the pre and post options have been deprecated and will be replaced by
# project hooks.

# Project hooks
# Runs on project start, always
on_project_start: 
 - docker start hpe_cont 
# Run on project start, the first time
# on_project_first_start: command
# Run on project start, after the first time
# on_project_restart: command
# Run on project exit ( detaching from tmux session )
on_project_exit: 
 - docker kill hpe_cont
 - sleep 2
 - docker kill uav_cont
 - sleep 2
# Run on project stop
on_project_stop: 
 - docker kill hpe_cont 
 - sleep 2 
 - docker kill uav_cont 
 - sleep 2

# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.
# pre_window: rbenv shell 2.0.0-p247

# Pass command line options to tmux. Useful for specifying a different tmux.conf.
# tmux_options: -f ~/.tmux.mac.conf

# Change the command to call tmux.  This can be used by derivatives/wrappers like byobu.
# tmux_command: byobu

# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.
# startup_window: editor

# Specifies (by index) which pane of the specified window will be selected on project startup. If not set, the first pane is used.
# startup_pane: 1

# Controls whether the tmux session should be attached to automatically. Defaults to true.
# attach: false

windows:
  - hpe_ctl:
      layout: tiled
      # Synchronize all panes of this window, can be enabled before or after the pane commands run.
      # 'before' represents legacy functionality and will be deprecated in a future release, in favour of 'after'
      # synchronize: after
      panes:
        - hpe_cam:
          - sleep 3; source catkin_ws_aerial_core/devel/setup.bash
          - waitForRos; roslaunch video_stream_opencv camera.launch
        - auth_hpe:
          - sleep 4;  source catkin_ws_aerial_core/devel/setup.bash
          - waitForRos; waitFor /camera/image_raw; roslaunch visualanalysis_acw gesture_2d_pose.launch
        - uav_ar_gui: 
          - sleep 5; source catkin_ws_aerial_core/devel/setup.bash
          - waitForRos; waitFor /stickman_cont_area; roslaunch uav_ar_gui uav_ar_gui.launch 
        - drone_ctl:
          - sleep 6; docker start -i hpe_cont 
          - waitForRos; waitFor /uav/visualanalysis/pose_det; roslaunch hpe_ros_package uav_control.launch
        - rtsp_stream:
          - sleep 7; docker exec -it hpe_cont bash
          - waitFor /uav/gui; sleep 2; roslaunch ros_rtsp rtsp_streams.launch 
  - bebop_ctl:
      layout: tiled
      panes:
        - bebop_driver:
          - sleep 1; docker start -i uav_cont
          - waitForPing bebop; roslaunch bebop_driver bebop_node.launch
        - joy_ctl:
          - sleep 2; docker exec -it uav_cont bash
          - waitForRos; waitFor /bebop/image_raw; roslaunch med_uav_control bebop_joy_override.launch
        - debug_joy:
          - sleep 5; docker exec -it uav_cont bash
          - waitForRos; waitFor /joy; rostopic echo /joy
        - debug_hpe_joy:
          - sleep 5; docker exec -it uav_cont bash
          - waitForRos; waitFor /hpe_joy; rostopic echo /hpe_joy
        - debug_cmd_vel:
          - sleep 5; docker exec -it uav_cont bash
          - waitForRos; waitFor /cmd_vel; rostopic echo /bebop/cmd_vel 
  - rpi:
      layout: tiled
      panes:
        - rtsp:
          - waitForPing raspberry; waitFor /uav/gui
          - ssh rpi@raspberry
          - sleep 5; export DISPLAY=:0; gst-launch-1.0 -v rtspsrc location=rtsp://goran-pc:8554/full drop-on-latency=true use-pipeline-clock=true do-retransmission=false latency=0 protocols=GST_RTSP_LOWER_TRANS_UDP ! rtph264depay ! h264parse ! avdec_h264 ! autovideosink sync=false
        - full-screen: 
          - waitForPing raspberry; waitFor /uav/gui
          - sleep 8; ssh rpi@raspberry
          - export DISPLAY=:0
          - wmctrl -r ':ACTIVE:' -b toggle,fullscreen
